{% macro get_terraform_type(type) -%}
    {%- if type == "enum" or type == "string" -%}
    schema.TypeString
    {%- elif type == "integer" -%}
    schema.TypeInt
    {%- elif type == "float" -%}
    schema.TypeFloat
    {%- elif type == "integer" -%}
    schema.TypeInt
    {%- elif type == "list" -%}
    schema.TypeList
    {%- elif type == "time" -%}
    schema.TypeFloat
    {%- elif type == "boolean" -%}
    schema.TypeBool
    {%- elif type == "object" -%}
    schema.TypeMap
    {%- else -%}
    schema.TypeString
    {%- endif -%}
{%- endmacro -%}

{% macro get_default_value(attribute) -%}
    {%- if attribute.type == "string" or attribute.type == "enum" -%}
    "{{ attribute.default_value }}"
    {%- else -%}
    {{ attribute.default_value }}
    {%- endif -%}
{%- endmacro -%}

package nuagenetworks

import (
    "github.com/hashicorp/terraform/helper/schema"
    "github.com/rvichery/vspk-go/vspk"
)

func resource{{ specification.entity_name }}() *schema.Resource {
    return &schema.Resource{
        Create: resource{{specification.entity_name}}Create,
        Read:   resource{{specification.entity_name}}Read,
        Update: resource{{specification.entity_name}}Update,
        Delete: resource{{specification.entity_name}}Delete,
        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },
        Schema: map[string]*schema.Schema{
            "id": &schema.Schema{
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
            },
            "parent_id": &schema.Schema{
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
            },
            "parent_type": &schema.Schema{
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
            },
            "owner": &schema.Schema{
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
            },
            {%- for attribute in specification.attributes %}
            {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
            "{{ attribute.local_name|lower }}": &schema.Schema{
                Type:     {{ get_terraform_type(attribute.type) }},
                {%- if attribute.required and not (attribute.autogenerated or attribute.read_only) %}
                Required: true,
                {%- else %}
                Optional: true,
                {%- endif %}
                {%- if attribute.autogenerated or attribute.read_only %}
                Computed: true,
                {%- endif %}
                {%- if get_terraform_type(attribute.type) == "schema.TypeList" %}
                Elem:     &schema.Schema{Type: schema.TypeString},
                {%- endif %}
                {%- if attribute.default_value and not (attribute.required  or attribute.autogenerated or attribute.read_only)%}
                Default: {{ get_default_value(attribute) }},
                {%- endif %}
            },
            {%- if attribute.type == "object" %}
            "{{ attribute.local_name|lower }}_raw": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            {%- for api in parent_apis %}
            {%- if api.actions.create %}
            {%- if api.remote_spec.instance_name != "me" %}
            "parent_{{ api.remote_spec.instance_name }}": &schema.Schema{
                Type:     schema.TypeString,
                {%- if parent_apis | length == 1 %}
                Required: true,
                {%- else %}
                Optional: true,
                {%- if (parent_apis | selectattr('actions.create') | map(attribute='remote_spec.instance_name') | reject('equalto', api.remote_spec.instance_name) | reject('equalto', 'me')| list | length) >= 1 %}
                ConflictsWith: []string{% raw %}{{% endraw %}"parent_{{ parent_apis | selectattr('actions.create') | map(attribute='remote_spec.instance_name') | reject('equalto', api.remote_spec.instance_name) | reject('equalto', 'me')|join('", "parent_') }}{% raw %}"}{% endraw %},
                {%- endif %}
                {%- endif %}
            },
            {%- endif %}
            {%- endif %}
            {%- endfor %}
        },
    }
}

func resource{{specification.entity_name}}Create(d *schema.ResourceData, m interface{}) error {

    // Initialize {{ specification.entity_name }} object
    o := &vspk.{{ specification.entity_name }}{
        {%- for attribute in specification.attributes %}
        {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
        {%- set field_name = attribute.name[0:1].upper() + attribute.name[1:] -%}
        {%- if attribute.required %}
        {{ field_name }}: d.Get("{{ attribute.local_name|lower }}").({{ attribute.local_type }}),
        {%- endif %}
        {%- endif %}
        {%- endfor %}
    }
    
    {%- for attribute in specification.attributes %}
    {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
    {%- set field_name = attribute.name[0:1].upper() + attribute.name[1:] -%}
    {%- if not attribute.required and not attribute.autogenerated and not attribute.read_only %}
    if attr, ok := d.GetOk("{{ attribute.local_name|lower }}"); ok {
        o.{{ field_name }} = attr.({{ attribute.local_type }})
    }
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    {%- if parent_apis | length == 1 %}
        {%- if parent_apis[0].remote_spec.instance_name != "me" and parent_apis[0].actions.create %}
    parent := &vspk.{{ parent_apis[0].remote_spec.entity_name }}{ID: d.Get("parent_{{ parent_apis[0].remote_spec.instance_name }}").(string)}
    err := parent.Create{{specification.entity_name}}(o)
    if err != nil {
        return err
    }
        {%- else %}
    parent := m.(*vspk.Me)
    err := parent.Create{{specification.entity_name}}(o)
    if err != nil {
        return err
    }
        {%- endif %}
    {%- else %}
        {%- for api in parent_apis %}
            {%- if api.actions.create %}
    if attr, ok := d.GetOk("parent_{{ api.remote_spec.instance_name }}"); ok {
        parent := &vspk.{{ api.remote_spec.entity_name }}{ID: attr.(string)}
        err := parent.Create{{specification.entity_name}}(o)
        if err != nil {
            return err
        }
    }
            {%- endif %}
        {%- endfor %}
    {%- endif %}
    
    

    d.SetId(o.Identifier())


    {%- for api in specification.child_apis -%}
        {% set child_specification = specification_set[api.rest_name] -%}
        {%- if api.allows_update and api.relationship == "member" %}
    if attr, ok := d.GetOk("{{ child_specification.entity_name_plural|lower }}"); ok {
        o.Assign{{ child_specification.entity_name_plural }}(attr.(vspk.{{ child_specification.entity_name_plural }}List))
    }
        {%- endif %}
    {%- endfor %}
    return resource{{specification.entity_name}}Read(d, m)
}

func resource{{specification.entity_name}}Read(d *schema.ResourceData, m interface{}) error {
    o := &vspk.{{specification.entity_name}}{
        ID: d.Id(),
    }

    err := o.Fetch()
    if err != nil {
        d.SetId("")
        return nil
    }

    {% for attribute in specification.attributes %}
    {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
    {%- set field_name = attribute.name[0:1].upper() + attribute.name[1:] -%}
    {%- if attribute.type != "object" -%}
    d.Set("{{ attribute.local_name|lower }}", o.{{ field_name }})
    {%- else -%}
    if v, ok := o.{{ field_name }}.(string); ok {
		raw := make(map[string]string)
		raw["raw"] = v
		d.Set("{{ attribute.local_name|lower }}_raw", raw)
	} else {
		d.Set("{{ attribute.local_name|lower }}", o.{{ field_name }})
	}
    {%- endif %}
    {%- endif %}
    {% endfor %}
    d.Set("id", o.Identifier())
    d.Set("parent_id", o.ParentID)
    d.Set("parent_type", o.ParentType)
    d.Set("owner", o.Owner)

    return nil
}

func resource{{specification.entity_name}}Update(d *schema.ResourceData, m interface{}) error {
    o := &vspk.{{specification.entity_name}}{
        ID: d.Id(),
    }
    
    err := o.Fetch()
    if err != nil {
        return err
    }
    {% for attribute in specification.attributes -%}
    {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
    {%- set field_name = attribute.name[0:1].upper() + attribute.name[1:] -%}
    {%- if attribute.required %}
    o.{{ field_name }} = d.Get("{{ attribute.local_name|lower }}").({{ attribute.local_type }})
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    {% for attribute in specification.attributes %}
    {%- if attribute.local_name.lower() not in ["connection", "count", "depends_on", "id", "lifecycle", "provider", "provisioner"] %}
    {%- set field_name = attribute.name[0:1].upper() + attribute.name[1:] -%}
    {%- if not attribute.required and not attribute.autogenerated and not attribute.read_only %}
    if attr, ok := d.GetOk("{{ attribute.local_name|lower }}"); ok {
        o.{{ field_name }} = attr.({{ attribute.local_type }})
    }
    {%- endif %}
    {%- endif %}
    {%- endfor %}

    o.Save()

    return nil
}

func resource{{specification.entity_name}}Delete(d *schema.ResourceData, m interface{}) error {
    o := &vspk.{{specification.entity_name}}{
        ID: d.Id(),
    }

    err := o.Delete()
    if err != nil {
        return err
    }

    return nil
}
